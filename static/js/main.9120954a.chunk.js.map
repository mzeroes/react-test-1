{"version":3,"sources":["components/Title.js","screens/NickNameScreen.js","components/MessageList.js","components/SendMessageForm.js","components/TypingIndicator.js","components/OnlineList.js","config.js","screens/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","title","NickNameScreen","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","state","username","setState","errorMessage","preventDefault","onChange","target","value","components_Title","Container","style","width","padding","display","flexDirection","Header","as","icon","textAlign","Icon","name","circular","Content","Input","type","placeholder","Button","marginTop","Component","MessagesList","renderRow","_ref","index","Card","link","header","messages","senderId","meta","moment","createdAt","fromNow","description","text","_this2","length","Segment","height","Loader","flex","es","_ref2","scrollToIndex","rowHeight","rowRenderer","rowCount","SendMessageForm","bind","assertThisInitialized","e","styles","container","marginBottom","form","input","fontSize","TypingIndicator","usersWhoAreTyping","concat","slice","join","OnlineList","key","users","id","currentUser","color","presence","renderUsers","Placeholder","Line","SERVER_URI","ChatScreen","sendTypingEvent","isTypingIn","roomId","currentRoom","catch","error","console","sendMessage","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","messageLimit","hooks","onMessage","message","toConsumableArray","onUserStartedTyping","user","onUserStoppedTyping","filter","onPresenceChange","forceUpdate","onUserJoined","overflow","paddingBottom","borderRadius","backgroundColor","Grid","Column","tertiary","MessageList","chatContainer","chatList","components_TypingIndicator","components_SendMessageForm","components_OnlineList","App","onNickNameSubmit","fetch","method","headers","Content-Type","body","JSON","stringify","response","currentScreen","offline","window","addEventListener","alert","screens_NickNameScreen","screens_ChatScreen","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9120954a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = (props) => (\n  <header className=\"App-header\">\n    {props.title}\n  </header>\n)\n\nexport default Title;\n","import React, { Component } from 'react'\nimport { Header, Container, Button, Input, Icon } from 'semantic-ui-react';\n\nimport Title from '../components/Title';\n\nclass NickNameScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: '',\n      errorMessage: ''\n    }\n  }\n\n  onSubmit = (event) => {\n    if (this.state.username === '') this.setState({ errorMessage: 'Enter a correct username' });\n    else {\n      event.preventDefault()\n      this.props.onSubmit(this.state.username)\n    }\n  }\n\n  onChange = (event) => {\n    this.setState({ username: event.target.value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Title title=\"React-Test-1\"/>\n        <Container style={{ width: '40%', padding: '20px' }}>\n          <form onSubmit={this.onSubmit}>\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}>\n              <Header as='h2' icon textAlign='center'>\n                <Icon name='users' circular />\n                <Header.Content>Chose a NickName</Header.Content>\n              </Header>\n              <Input\n                type=\"text\" onChange={this.onChange}\n                placeholder='Enter a nick name'\n              />\n              <Button type=\"submit\" style={{ marginTop: '20px' }}>Continue</Button>\n              <span>{this.state.errorMessage}</span>\n            </div>\n          </form>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default NickNameScreen\n","import React, { Component } from 'react'\nimport { Segment, Loader, Feed, Card } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { List, AutoSizer } from \"react-virtualized\";\n\nclass MessagesList extends Component {\n  renderRow = ({ index }) => (\n    <Card\n      style={{width: '80%'}}\n      link\n      header={this.props.messages[index].senderId}\n      meta={moment(this.props.messages[index].createdAt).fromNow()}\n      description={ this.props.messages[index].text }\n    />\n  )\n\n  render() {\n    if (this.props.messages.length === 0)\n      return (\n        <Segment style={{ height: '100%', display: 'flex', width: '100%' }}>\n          <Loader />\n        </Segment>\n      )\n    return (\n      <div style={{ display: 'flex', height: '100%',  width: '100%' }}>\n          <div style={{ flex: 1 }}>\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                 scrollToIndex={this.props.messages.length-2}\n                  width={width}\n                  height={height}\n                  rowHeight={40}\n                  rowRenderer={this.renderRow}\n                  rowCount={this.props.messages.length} \n                  />\n              )}\n            </AutoSizer>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default MessagesList\n","import React, { Component } from 'react'\nimport { Input, Button } from 'semantic-ui-react';\n\nclass SendMessageForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: '',\n    }\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onSubmit(e) {\n    e.preventDefault()\n    this.props.onSubmit(this.state.text)\n    this.setState({ text: '' })\n  }\n\n  onChange(e) {\n    this.setState({ text: e.target.value })\n    if (this.props.onChange) {\n      this.props.onChange()\n    }\n  }\n\n  render() {\n    const styles = {\n      container: {\n        padding: 20,\n        marginBottom: 20,\n      },\n      form: {\n        display: 'flex',\n      },\n      input: {\n        flex: 1,\n        fontSize: 16,\n      },\n    }\n    return (\n      <div style={styles.container}>\n        <div>\n          <form onSubmit={this.onSubmit} style={styles.form}>\n            <Input\n              type=\"text\"\n              placeholder=\"Type a message ...\"\n              onChange={this.onChange}\n              value={this.state.text}\n              style={styles.input}\n            />\n              <Button type=\"submit\" >Send</Button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SendMessageForm\n","import React, { Component } from 'react'\n\nclass TypingIndicator extends Component {\n  render() {\n    if (this.props.usersWhoAreTyping.length > 0) {\n      return (\n        <div>\n          {`${this.props.usersWhoAreTyping\n            .slice(0, 2)\n            .join(' and ')} is typing`}\n        </div>\n      )\n    }\n    return <div />\n  }\n}\n\nexport default TypingIndicator\n","import React, { Component } from 'react'\nimport { Placeholder, Icon } from 'semantic-ui-react';\nimport { List, AutoSizer } from \"react-virtualized\";\n\nclass OnlineList extends Component {\n\n  renderRow = ({ index, key, style }) => {\n    return (\n      <div key={key} style={style}>\n        <div>\n          {\n            this.props.users[index].id === this.props.currentUser.id\n              ? <Icon color='green' name='checkmark' circular />\n              :\n              (\n                this.props.users[index].presence.state === 'online'\n                  ?\n                  <Icon color='blue' name='checkmark' circular />\n                  :\n                  <Icon color='grey' name='checkmark' circular />\n              )\n          }\n          <span>\n            {this.props.users[index].name}\n          </span>\n        </div>\n      </div>\n\n    )\n  }\n\n  renderUsers() {\n    return (\n      <div style={{ display: 'flex', height: '100%', width: '100%' }}>\n        <div style={{ flex: 1 }}>\n          <AutoSizer>\n            {({ height, width }) => (\n              <List\n                width={width}\n                height={height}\n                rowHeight={50}\n                rowRenderer={this.renderRow}\n                rowCount={this.props.users.length} />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.props.users) {\n      return this.renderUsers()\n    } else {\n      return (\n        <Placeholder>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder>\n      )\n    }\n  }\n}\n\nexport default OnlineList\n","const SERVER_URI = 'http://localhost:3001'\nconst INSTANCE_LOCATER = 'v1:us1:e4044788-6361-43c9-ba0a-6b00c0045020'\n\n\nexport {\n  SERVER_URI,\n  INSTANCE_LOCATER\n}\n\n","import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from '../components/MessageList'\nimport SendMessageForm from '../components/SendMessageForm'\nimport TypingIndicator from '../components/TypingIndicator'\nimport OnlineList from '../components/OnlineList'\nimport { SERVER_URI, INSTANCE_LOCATER } from '../config';\nimport { Grid, Card, Segment } from 'semantic-ui-react';\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: [],\n      usersWhoAreTyping: [],\n    }\n\n  }\n\n  sendTypingEvent = () => {\n    this.state.currentUser\n      .isTypingIn({ roomId: this.state.currentRoom.id })\n      .catch(error => console.error('error', error))\n  }\n\n  sendMessage = (text) => {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id,\n    })\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: INSTANCE_LOCATER,\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: `${SERVER_URI}/authenticate`,\n      }),\n    })\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({ currentUser })\n        return currentUser.subscribeToRoom({\n          roomId: '31207023',\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message],\n              })\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name],\n              })\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\n                  username => username !== user.name\n                ),\n              })\n            },\n            onPresenceChange: () => this.forceUpdate(),\n            onUserJoined: () => this.forceUpdate(),\n          },\n        })\n      })\n      .then(currentRoom => {\n        this.setState({ currentRoom })\n      })\n      .catch(error => console.error('error', error))\n  }\n\n  render() {\n    const styles = {\n      chatContainer: {\n        height: '100vh',\n        width: '100vw'\n      }\n    }\n\n    return (\n      <Card\n       style={{ \n        overflow: 'hidden', \n        height: \"100vh\", \n        width: '100vw', \n        paddingBottom: 100,\n        borderRadius: 2,\n        backgroundColor: '#eee'\n        }}>\n        <Card.Content>\n          <Grid style={{ height: '80%'}}>\n          <Grid.Column width={\"13\"}>\n              <Segment tertiary>Messages</Segment>\n              <MessageList\n                messages={this.state.messages}\n                style={styles.chatList}\n              />\n            <TypingIndicator usersWhoAreTyping={this.state.usersWhoAreTyping} />\n            <SendMessageForm\n              onSubmit={this.sendMessage}\n              onChange={this.sendTypingEvent}\n            />\n          </Grid.Column>\n        <Grid.Column width={\"3\"}>\n              <Segment tertiary>users</Segment>\n            <OnlineList\n              currentUser={this.state.currentUser}\n              users={this.state.currentRoom.users}\n            />\n          </Grid.Column>\n        </Grid>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n\nexport default ChatScreen\n","import React, { Component } from 'react'\nimport NickNameScreen from './screens/NickNameScreen'\nimport ChatScreen from './screens/ChatScreen'\nimport './App.css'\nimport 'react-virtualized/styles.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport { SERVER_URI } from './config';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      currentUsername: '',\n      currentScreen: 'WhatIsYourUsernameScreen',\n      error: '',\n      offline: false\n    }\n  }\n  componentDidMount() {\n    window.addEventListener('online', () => { this.setState({ offline: false }) })\n    window.addEventListener('offline', () => { this.setState({offline: true}) })\n  }\n  onNickNameSubmit = (username) => {\n    fetch(`${SERVER_URI}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username }),\n    })\n      .then(response => {\n        this.setState({\n          currentUsername: username,\n          currentScreen: 'ChatScreen',\n        })\n      })\n      .catch(error => console.error('error', error))\n  }\n  componentDidCatch(error) {\n    this.setState({ error, currentScreen: 'error' })\n  }\n  render() {\n    if(this.state.offline){\n      alert(\"You are offline, please connect to internet to continue\")\n    }\n    switch (this.state.currentScreen) {\n      case \"WhatIsYourUsernameScreen\":\n        return <NickNameScreen onSubmit={this.onNickNameSubmit} />\n      case \"ChatScreen\":\n        return <ChatScreen currentUsername={this.state.currentUsername} />\n      default:\n        return (\n          <div>{this.state.error}</div>\n        )\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register();\n"],"sourceRoot":""}